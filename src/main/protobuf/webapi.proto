package com.geeksville.dapi;

option java_package = "com.geeksville.dapi";


/**
 A login/user-create/passwork-check request.  
 
 Note: These three slightly different operations are overloaded into this one message type because for some platforms
 there is a fair amount of hand coding for each new message type, and these messages are quite similar.
 
 A successful login must be completed before any further messages will be accepted by the server.
 */
message LoginMsg {
	enum RequestCode {
        // Please log me in
        LOGIN = 0;
        
        // Please attempt to create a new user (and log me in)
        CREATE = 1;
        
        // Just check if the username is available (return OK or NAME_UNAVAILABLE)
        CHECK_USERNAME = 2;
    }
    required RequestCode code = 1;
    
	required string username = 2;
    
	optional string password = 3;
	
	// Only used if creating a new user record
	optional string email = 4;

	// If specified this is the clients notion of connection time (in UTC) as usecs since 1970
	optional int64 startTime = 5;
	
	// Autopilot type if known, preferably from the master gcs-types.txt definitions file.
	// To add new definitions to the file, please submit a github pull-request.
	optional string gcsName = 6;
	
	// GCS software version
	optional string softwareVersion = 7;
	
	// The version # of this protocol that is being used by this client (new versions of webapi.proto will increment this number)
	optional int32 protocolVersion = 8 [default = 1];
}

/**
 Sent from server when it would prefer the GCS to show a message to the user.
 If the client is a vehicle or has no user interface, these messages can be ignored
 */
message ShowMsg {     
    // If specified, server would like to show the indicated message to the user 
    optional string text = 1;
    
    // If specified, server would like the user to be shown the following HTML content (may be sent even for successful login)
    optional string url = 2;
    
    enum Priority {
        // A minor informational message (on android the best UI element for this would be a Toast)
        LOW = 0;
        
        // A message to show the user, but not urgent.  
        // For a text only GCS just print the text, for android use a Notification
        MEDIUM = 1; 
        
        // This message is urgent, please raise a dialog/pop-up
        HIGH = 2;
    }
    required Priority priority = 3;    
}

/**
 Sent from server in response to a LoginMsg
 */
message LoginResponseMsg {
    enum ResponseCode {
        // You are now logged in, please continue
        OK = 0;
        
        // login not found or password invalid
        BAD_PASSWORD = 1; 
        
        // Server is busy, please call back later
        CALL_LATER = 2;
        
        // Someone else has that username
        NAME_UNAVAILABLE = 3;
        
        // The server can not speak that version number of the protocol
        PROTOCOL_INCOMPATIBLE = 4;
    }
    required ResponseCode code = 1;
    
    // If specified, server would like to show the indicated message to the user (explains the fault)
    optional ShowMsg message = 2;
}

/**
 A message sent in either direction to indicate mavlink data which was received/sent.
*/
message MavlinkMsg {
	required sint32 srcInterface = 1;
	repeated bytes packet = 2;

	// If specified this is the delta time from the original connection time (in usecs)
	optional int64 deltaT = 3;
}

// Set the vehicle ID that corresponds to a particular sysId on a particular interface
// GCSes should also be described to the server using this same mechanism but use the special string "GCS" as the UUID
message SetVehicleMsg {
	// The interface the gcs is using to reach this vehicle (to allow clashing sysIds on different radio links) 
	required sint32 gcsInterface = 1;

	// The mavlink sysId the vehicle is appearing as for this session/interface
	required int32  sysId = 2;

	// vehicleId need only unique for a particular user, and if the client uses a previously unknown vehicle ID a new vehicle
	// record may be created on the server (underneath that user's account)
	// GCSes should also be described to the server using this same mechanism but use the special string "GCS" as the UUID
	required string vehicleUUID = 3;
	
	// If false the vehicle will not be able to respond to any commands sent from the server (either due to link limitations or the fact
	// that this is merely a delayed upload of a stored log file)
	required bool	canAcceptCommands = 4;
	
	// A human readable name for this vehicle (i.e. My Bixler).  This will be used to update vehicle metadata on the server
	optional string humanName = 5;
	
	// Vehicle manufacturer if known, preferably from the master vehicle-mfg.txt definitions file.  
	// To add new definitions to the file, please submit a github pull-request.
	optional string manufacturer = 6;
	
	// Vehicle type if known, preferably from the master vehicle-types.txt definitions file.  
	// To add new definitions to the file, please submit a github pull-request.
	optional string vehicleType = 7;
	
	// Autopilot type if known, preferably from the master autopilot-types.txt definitions file.
	// To add new definitions to the file, please submit a github pull-request.
	optional string autopilotType = 8;
	
	// Autopilot software version #
	optional string softwareVersion = 9;
}

// Enums used to decode the super large envelope variant (not using a variant record is also an option but this made for an easy experiment similar 
// to how I've used protobufs in the past)
enum EnvelopeMsgCode {
	MavlinkMsgCode = 10;
	LoginMsgCode = 11;
	SetVehicleMsgCode = 12;
	
	LoginResponseMsgCode = 64;
	ShowMsgCode = 65;
}

// Envelope to contain all the messages. At any time, ONLY 1 of the optional fields can be used.
message Envelope {
  	// Optional optimization: Identifies which field is filled in.  If not specified receiver will need to check each optional payload below.
  	optional EnvelopeMsgCode type = 3;

    // Payloads that can be sent in either direction
    optional MavlinkMsg mavlink = 10;
    	
	// Client to server payloads
	optional LoginMsg login = 11;
	optional SetVehicleMsg setVehicle = 12;
	
	// Server to client payloads
	optional LoginResponseMsg loginResponse = 64;
	optional ShowMsg show = 65;
}
