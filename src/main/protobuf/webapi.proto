package com.geeksville.dapi;

option java_package = "com.geeksville.dapi";


message LoginMsg {
	required string username = 1;
	required string password = 2;
}

message MavlinkMsg {
	required sint32 srcInterface = 1;
	repeated bytes packet = 2;
}

// Set the vehicle ID that corresponds to a particular sysId on a particular interface
message SetVehicleMsg {
	// The interface the gcs is using to reach this vehicle (to allow clashing sysIds on different radio links) 
	required sint32 gcsInterface = 1;

	// The mavlink sysId the vehicle is appearing as for this session/interface
	required int32  sysId = 2;

	// vehicleId is globally unique and must previously have been registered with the web API
	repeated string vehicleId = 3;
}

// Enums used to decode the super large envelope variant (not using a variant record is also an option but this made for an easy experiment similar 
// to how I've used protobufs in the past)
enum EnvelopeMsgCode {
	LoginMsgCode = 10;
	MavlinkMsgCode = 11;
	SetVehicleMsgCode = 12;
}

// Envelope to contain all the messages. At any time, ONLY 1 of the optional fields can be used.
message Envelope {
  	// Identifies which field is filled in.  If not specified receiver will need to check each optional payload below
  	optional EnvelopeMsgCode type = 3;

	// Payloads
	optional LoginMsg login = 10;
	optional MavlinkMsg mavlink = 11;
	optional SetVehicleMsg setVehicle = 12;
}
