package com.geeksville.apiproxy;

import java.io.IOException;
import java.net.UnknownHostException;
import java.util.UUID;

import com.geeksville.dapi.Webapi.Envelope;

/**
 * These are low level routines called by the GCS to hook into the proxy. When
 * the proxy calls in the expected sequence of operations are:
 * 
 * loginUser
 * 
 * setVehicleId (must be done before any data is sent from that vehicle)
 * 
 * filterMavlink (for each packet)
 * 
 * @author kevinh
 * 
 */
public interface GCSHooks {
	/**
	 * Provide the callbacks for the GCS. GCS must call this routine before
	 * calling any other API functions.
	 * 
	 * @param cb
	 */
	void setCallback(GCSCallback cb);

	/**
	 * GCS must call this for ever mavlink packet received or sent from the
	 * vehicle
	 * 
	 * @param bytes
	 *            the packet
	 * @param fromInterface
	 *            the interface # this data arrived on (or -1 if generated by
	 *            the GCS itself)
	 * @throws IOException
	 */
	void filterMavlink(int fromInterface, byte[] bytes) throws IOException;

	/**
	 * Connect to web service
	 * 
	 * @param userName
	 * @param password
	 * @throws IOException
	 * @throws UnknownHostException
	 */
	void loginUser(String userName, String password)
			throws UnknownHostException, IOException;

	void createUser(String userName, String password, String email)
			throws UnknownHostException, IOException;

	/**
	 * Associate a server vehicleId string with a particular mavlink sysId. GCS
	 * must call this for every vehicle that is connected.
	 * 
	 * @param vehicleId
	 *            a UUID for this vehicle, if the server has never seen this
	 *            UUID before, a new vehicle record will be created. Use the
	 *            special string "gcs" for data from the GCS (not really a
	 *            vehicle)
	 * @param fromInterface
	 *            the interface # this vehicle is connected on
	 * @param mavlinkSysId
	 *            the mavlink sysid for this vehicle
	 * @param canAcceptCommands
	 *            this vehicle is controllable from the server
	 * @throws IOException
	 */
	void setVehicleId(String vehicleId, int fromInterface, int mavlinkSysId,
			boolean canAcceptCommands) throws IOException;

	// / Begin a new mission
	void startMission(Boolean keep, UUID uuid) throws IOException;

	// / End a mission
	void stopMission(Boolean keep) throws IOException;

	/**
	 * A low level packet send command
	 * 
	 * @param e
	 * @throws IOException
	 */
	void send(Envelope e) throws IOException;

	/**
	 * Send any queued messages immedately
	 * 
	 * @throws IOException
	 */
	void flush() throws IOException;

	/**
	 * Disconnects from web service
	 * 
	 * @throws IOException
	 */
	void close() throws IOException;

}
